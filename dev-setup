#!/bin/bash
#
# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_OPTIONAL_BOOLEAN([selfupdate],[],[Update dev-setup],[])
# ARG_OPTIONAL_BOOLEAN([dryrun],[],[Output only, no changes],[])
# ARG_OPTIONAL_REPEATED([modules],[m],[Modules to provision])
# ARG_TYPE_GROUP_SET([modules],[modules],[modules],[android,aws,core,datastores,osx,osxprep,pydata,rcm,web,all])
# ARG_HELP([dev-setup installer])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.6.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='mh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}


# validators
modules()
{
	local _allowed=("android" "aws" "core" "datastores" "osx" "osxprep" "pydata" "rcm" "web" "all")
	local _seeking="$1"
	for element in "${_allowed[@]}"
	do
		test "$element" = "$_seeking" && echo "$element" && return 0
	done
	die "Value '$_seeking' (of argument '$2') doesn't match the list of allowed values: 'android', 'aws', 'core', 'datastores', 'osx', 'osxprep', 'pydata', 'rcm', 'web' and 'all'" 4
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_selfupdate="off"
_arg_dryrun="off"
_arg_modules=()

print_help ()
{
	printf '%s\n' "dev-setup installer"
	printf 'Usage: %s [--(no-)selfupdate] [--(no-)dryrun] [-m|--modules <modules>] [-h|--help]\n' "$0"
	printf '\t%s\n' "--selfupdate,--no-selfupdate: Update dev-setup (off by default)"
	printf '\t%s\n' "--dryrun,--no-dryrun: Output only, no changes (off by default)"
	printf '\t%s\n' "-m,--modules: Modules to provision (one of 'android', 'aws', 'core', 'datastores', 'osx', 'osxprep', 'pydata', 'rcm', 'web' and 'all'; empty by default)"
	printf '\t%s\n' "-h,--help: Prints help"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--no-selfupdate|--selfupdate)
				_arg_selfupdate="on"
				test "${1:0:5}" = "--no-" && _arg_selfupdate="off"
				;;
			--no-dryrun|--dryrun)
				_arg_dryrun="on"
				test "${1:0:5}" = "--no-" && _arg_dryrun="off"
				;;
			-m|--modules)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_modules+=("$(modules "$2" "modules")") || exit 1
				shift
				;;
			--modules=*)
				_arg_modules+=("$(modules "${_key##--modules=}" "modules")") || exit 1
				;;
			-m*)
				_arg_modules+=("$(modules "${_key##-m}" "modules")") || exit 1
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash
# Validation of values

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

should_provision() {
    [[ ${_arg_dryrun} == "off" ]]
}

start_sudo() {
    sudo -v
    ( while true; do sudo -v; sleep 60; done; ) &
    SUDO_PID="$!"
    trap stop_sudo SIGINT SIGTERM
}

stop_sudo() {
    kill "$SUDO_PID"
    trap - SIGINT SIGTERM
    sudo -k
}

provision_module() {
    local module="${1}.sh"
    local requires_sudo=("osx" "osxprep")

    if [[ ! -e ${module} ]]; then
        echo "${module} does not seem to exist, skipping."
        false
        return
    fi

    echo "Running ${module} module"

    if [[ " ${requires_sudo[@]} " =~ " ${1}" ]]; then
        should_provision && echo "( start_sudo && ${module} && stop_sudo )"
    else
        should_provision && echo "( ${module} )"
    fi
}

# Run everything from home directory
(
    cd ~

    if [[ ${_arg_selfupdate} == "on" ]]; then
        if [[ $(git rev-parse --is-inside-work-tree 2>/dev/null) ]]; then
            echo "Update via git pull"
            should_provision && git pull origin master
        else
            echo "Update via tarball download and extraction"
            should_provision && curl -#L https://github.com/omares/dev-setup/tarball/master | tar -xv --strip-components 1 --exclude={README.md,LICENSE}
        fi

        [[ ${#_arg_modules[@]} -eq 0 ]] && exit 0
    fi

    if [[ ${#_arg_modules[@]} -eq 0 ]]; then
        _PRINT_HELP=yes die "Please provide a module to install" 1
        exit 0
    fi

    read -p "dev-setup may overwrite existing files in your home directory. Are you sure? (y/n) " -n 1;
    echo "";
    [[ ! $REPLY =~ ^[Yy]$ ]] && exit 0


    [[ " ${_arg_modules[@]} " =~ " all " ]] && _arg_modules=("android" "aws" "core" "datastores" "osx" "osxprep" "pydata" "rcm" "web")

    for module in "${_arg_modules[@]}"
    do
       provision_module ${module}
    done

    echo "------------------------------"
    echo "Completed running dev-setup, restart your computer to ensure all updates take effect"
    echo "------------------------------"

)

# ] <-- needed because of Argbash
